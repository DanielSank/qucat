{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coupled Transmon / LC-oscillator (using the GUI)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T17:59:56.035600Z",
     "start_time": "2019-05-01T17:59:53.459600Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Import the graphical user interface\n",
    "from qucat import GUI\n",
    "\n",
    "# For the purpose of this tutorial, \n",
    "# we create a file describing the circuit\n",
    "# which would typically done by the user\n",
    "# from a blank editor\n",
    "import os\n",
    "os.makedirs('circuits/', exist_ok=True)\n",
    "with open('circuits/transmon_LC_GUI.txt','w') as f:\n",
    "    f.write(\"\"\"C;0,-1;1,-1;1.000000e-15;\n",
    "C;-1,0;-1,-1;1.000000e-13;\n",
    "J;0,0;0,-1;;L_J\n",
    "W;-1,0;0,0;;\n",
    "W;-1,-1;0,-1;;\n",
    "C;1,0;1,-1;1.000000e-13;\n",
    "L;2,0;2,-1;1.000000e-08;\n",
    "W;1,0;2,0;;\n",
    "W;1,-1;2,-1;;\n",
    "G;2,1;2,0;;\n",
    "G;-1,1;-1,0;;\n",
    "R;3,0;3,-1;1.000000e+06;\n",
    "W;2,0;3,0;;\n",
    "W;2,-1;3,-1;;\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Construct the circuit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will be studying a circuit constituted of a transmon qubit coupled to a lossy RLC resonator.\n",
    "\n",
    "Below we open the editor. All changes made to the circuit are saved automatically and when we shut down the editor, the variable ``cir`` here will become a quantum circuit object ``qucat.Qcircuit`` with which we will analyze the circuit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T17:59:58.387600Z",
     "start_time": "2019-05-01T17:59:56.038600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfIAAADQCAYAAAD8guNZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAFj1JREFUeJzt3XmUpFV9h/HnFZBFQXFDEn8RUVSEKKK4gSyyqMEtLmhOUBSNuzF6RIwLjoKJQQ/GGI1yxAVXFJeAGmVzFEXFBQgg7gJXBRSRLcCIMzd/3Lfsmqa7unu6q966Vc/nnDpd3f1W9Z133qpv3b3JOSNJkup0q64LIEmSNpxBLklSxQxySZIqZpBLklQxg1ySpIoZ5JIkVcwglySpYga5JEkVM8glSaqYQS5JUsUMckmSKmaQS5JUMYNckqSKGeSSJFXMIJckqWIGuSRJFTPIJUmqmEEuSVLFDHJJkipmkEuSVDGDXJKkihnkkiRVzCCXJKliBrkkSRUzyCVJqphBLklSxQxySZIqZpBLklQxg1ySpIoZ5JIkVcwglySpYga5JEkVM8glSaqYQS5JUsUMckmSKmaQS5JUMYNckqSKGeSSJFVs464LIE2TiMhz/Tyl1AzzsZImlzVySZIqZpBLklQxg1ySpIoZ5JIkVcwglySpYga5JEkVM8glSaqYQS5JUsUMckmSKubKbhMuIjYC3gDsC5wOHJlSWtttqcaH52cwz89gEbEJcCrwQOAcYP+U0s3dlmp8eP2MhkE++d4AHAZsAewKZOBNnZZovHh+BvP8DHYqsFd7fy/gFGCf7oozdrx+RqDJec7lmzUhIuJMYI+uy6HBlrPWulSRM1NKe3ZdiEljjXzynU75JLwFcANwdErJT8StiFjFTI1h6OdnGGE8zE1TRn1+ahMRq5mpkQOsTilZI2/Ncf2c3mmBJpSD3SbfkcDR7f2jgaM6LMs48vwM5vkZbH9gdXt/NXBAZyUZT14/I2DT+pSIiOx2l/Mb1fmpdRtTr5/BPD+DeX6Gyxq5JEkVM8glSaqYQS5JUsUMckmSKmaQS5JUMYNckpYhInwfVadcEEaSlueVABFxMmW99dOAs1JKf+q0VJoafpKUpOXZuf36OMra4l8DLo+IoyMiuiuWpoU1cmmElrMohgtqjK1DgX8BdgEeRgn0HShLk748It5MWdrWXdE0FNbIJWkZUkrrUko/SSl9KqX0ypTSvYGHAp8Gbk1ZlvSkiNis04J2JCLu237dquuyTCpr5JK0wlJKZwMHRcS+wCeAxwD/CTyv04J145D261UR8R3KGILTgG/bSrEyrJFL0pCklE4H9gNuBg6NiPt0XKQu/Kzv/iOAI4CvU4L9CxHxTxGxU0TYdbSBDHJJGqKU0v8CJwEN8JCOizNyKaXj2vEddwCeAPwH8EPgtsCBwDuAC4BzIuLWnRW0YjatSx1omuYDlEFRv8057zzPMXcGvkDpZ/1H4CPAdcDa9pAX55zPGkFx1YqI2wHbA9tQ/l/WAVcClwGXppTm205y0/br1NY6U0rXRsRZwGbt7Z7MnBcoQb8x8McOilc1g1zqxocofabHDzhmX+BHOedDAJqmAdgn53zl0EunP2sHab0UeDpw/wGHXhcR5wGnACenlM5tH78fpea5Djh1yMUdKxGxObA7pXthf+CBrP9h5mrgDEqf+QkppRtGXsgJYJBLHcg5f71pmu3m+33TNLsARwObN01zLvDwERVNfSLizsBZwL3aH62h9Pn+pr2/MXBH4O7AXYA92tubI+K7wO+BfSjhdWRK6bKR/gNGLCI2okzD6wX3Hqxf6/4j8E3KB5rTgB+klNbOfh4tjUEujaGc87lN0xwBPDjn/FL4c438q03TrAXW5Jwf2mUZp8SzKCF+LfAM4KsppZvmOjAitqF84Hoy8Exgt75ffxE4crhF7UZE3AV4EiW896U0kfc7l5ng/oa17pVnkEt1sWl9tC5tv24FPAe4S0ScD/wW+D9KX+/tKf3m9wMeCew1x/PsBNwNuHjI5R2piLgfcOGsH18FfJYS3GeklH438oJNGYNckuZ3IqWL41XA09rbYnwf+CClJn4CZbT6hyNi7wED4mp0M6Wf+/Z9P7sd5UPNb4DfRMTVzhcfLoNckubRhu7hEfFu4KmUJVh3pDQf3wa4iTKT4JeUvvNvA19LKV3Se46IeAzwE2BPStP7xMw0SCn9tG1afyilaX0/yjl6BDNzxq+PiK8xsxDMhRP2YaZzBrkmXkRsCbwNeG1K6aoNeHwAhwOvTCmtyNSYpmk+AewN3Klpml8Bb8w5H7cSz62Vl1K6FDhmAx/7h4j4EqW/fScmKMgB2tr2N9rbqnaU/17MBPv9KKP2D2wfcnlE9EL9tJTSr0df6snS5OwHo2kQEXkaN91oQ/x/KFNgzgH2myvM5zs/bYivpvSBngw8daXCvCbTev30i4g7UmqZ96KMUN+U0rR8FaUZ+ULgopTSjbMe1wBnAw8GnpRS+u9RlrtrEfGXlEFwvWDfdtYhF1GmoB3fLm2rJTLIKxURQ/2Pm4Q37Vkh3jNnmM8VVLNCvGciwtzrZ/EiYlfgXykhtNBqmH+kLD96MmUBn6uBfwbeQgn8e6SUrh1eacdb+6HmfsDjgVWsPzXtGmBrm92XzqZ1TaR5QhzKghSnRcScNfO+x88V4lDegE6MiOrDXAuLiJ0pTcabU2rfX6csL/obSv/4JpR55NtR9iW/DzM1z3fOeroXTmuIL2J+OcA7DfENY5BrUr2AW4Z4z8AwHxDiPY+njF7+2AqUU+PtCZQQvwbYYaGpVO1c8tcBL5v1q2NTSp8eThHHU0Rsz8yHmrnml5/DzAA455cvg0GuSXUMcF/gufP8fs4wX0SIQ9lf+uMrVE6Nt68CmTKl6ryI+DJlg48rWH8e+T0po9l3Z/2pWD2HRMQJKaUzRlLqDkTE1sCjgAMote57zDrkEmYWhnF++Qqyj7xS9nEuLCJuBRzL/GEObZ85ZSnNv2JxIX5E7U2AXj+LFxGPo+zQda+Fjm39Evg8cBxlINe7gRdSFoPZcb6V4WoUEZtR5tgfSJkr3z+G4A/MrKN+KvCL2l8348oauSZWSmldRDy//XZgzby9v5opCHEtTUrpCxHxRWBX5p5Hfi0lpH8CfC+l9Mv+x0fEyyhTDe/bfv3yiIo+Cgdzy6VnE2X++EdTSn8afZGmjzVyLVqtW28usma+EEN8mWq9flZCRHwIOAR4SUrpPXMdM9/5aZrmDpTV4bajfGA4KOf8h8X+7aZpLqas2X9l+/3ewKtyzo/bgH/Keto5428EHkv5gNPvcmb6wJc9X3yR18+qtjw75Jx/1v7sFZSutt1yzt9rz+d7gAe1DzsZODznXO3qcwa5Fq1pmj2B64HjB7yQngE8tm/rzYvpexPpyjLDfFEh3jTN9Tnn2y70ZO2bzfU557dvQFmqVfn1cxtKv+/uwL2BO1EGwa2hDIRLlGb07wPf6p/REBFbUEa63x3YJ6W0eq6/Md/5aZrmaOCqnPNbm6Z5DbB1zvnwxZZ9mEHer2+++P6U7qq7zjrkImaCffVSR/Av8vpZRdm05lM556Pan32TMm7hkDbITwa+nHN+d9M0t6LMLrgu5/zapZRnnNi0rkWreevNRTazz8Wa+Aqp9fqJiBcAb2XuQWxzuaEdFHcsZeraxyghfgFlC885DTg/T6Q0yQN8mNIFtF6QN03zbMoI+y0oA+8+l3N+9SLLuyLaGvfxwPF988V7o9b3ptTYd6SM6F8bEd9hJti/s9B0zoWunz6fp5yzo5qm2Z7yQetmgKZpdgT+Iuf87vY51zVNcxjwi6Zpjsg5V9kVYJBrxYz71psbEOaG+AiN4/UTEY8G3tt++33KJigXUJqNb6R0AWxNGaG9E2X3s50otcIn9z3V1cCzNnDzkG1yzpcB5Jwva5rmLvMctwtlzMca4MdN07wr55za3/XOIcBtgR9tQDkWrX3NXNje3hkRmzB4PXYiYlVK6U0r8OevBVLTNDtTAv0Eys51UD5InNd/cM75pnaZ5LsDP1+Bvz9yBrlGYWy23mzD/M3AQcCWAw69HHiHIT4Wurx+dmm/XgMcnFKaNwDb7psHAIcCL53165Mo+3IP0+k552sAmqbpNeX3gnyf2U3rQy7LevrXY4+IDwNPoQyS26zvsIOBlQhygE9S9o9/NKW5vxfkaykfZGbbCqiyNg4GuaZMO0/8qwwOcSj9ewuuAKeJdwLwasoo9Ysi4heUWuZllBr5ppQa+faUUen919XVlH70TSkbppxNmYq2VFc0TbNtWxvflrIX+lzW9N1fy5i8v7dr1D+Kmdr47JkhlwBnAu9awT97MmWjpO/lnK9tW3agbFjz3qZpNs853wjQNM19gFvnnC+Z+6nG31j8R0ujsMjFXvotajlXTa6U0sUR8UBK8+9TKNfOoOvnV5Q50ycBX0wp3RwRz6L0bf9bRHxqAxZCOYky4v2t7dex3nQlIjanDArsBfeuQP+6AkOfX55zvrFpmsMpUwL7f/67pmneD/xX0zTPpXzQOo5ZYw5qY5Br0WreenMDQrzHMF8htV4/7Ramz4uIF1H6WOcdtT5XSKeUjo+IQylbe+4NzLlU64Dz81bgU23wXEpZHnhstF0KD2QmuPdg/SbzP1Ka1XvBfU5Kae3s51nIUq+fnPMn53iOZ1EGBd6fsm7+zsBuwOuapvl1jVMbwelnmgLLCPF+826B2tM0zTrKZho9x+Scb7GHddM0RwFX5JxXsilRIxQRG1NGiN+0mM1zIuKjwN8D/5BSev+wyzcq7c5wXwK2mfUr11EfIWvklXKJzcVZwtrpr6c0sS1pbfZ+OeeFtrjs2YnSV9cZr5+liYiHAU+nTInbkTI4qve7NZR+3h8D36U0G3+nt6pZew0+sT38eyMs9ijcmbI3e78rKOfhbMpKd4b4kFkjr5RvxAtbQogfAawDNmKRa7NvaDN70zTnU/rtnt7lnFWvn8Vpa97HA38361eZsmnK5pTrZrbLKf3iX6FcU/cCPp9S+tvhlbYb7S5nvY1SHsX68+0z5cNLb7OUs1JKa27xJFoWg7xSvhEPtpQQTynliMgppWYpG60sFOZN07yOW/Znfjrn/JYF/wFD5vWzOBHxHOADlFHg76QsH3sBcGV73TSUNde3p9TUH0mZ8jR7g5XzgP0nfcevdt/xBzGzutvulD3be26g9E2f2t4ucIrn8tm0rkn1GDZgA5RFLhqzC+UNe+Do4TawOw9tLUtvzvEaSkvKT2lDHP688Mn1EfEzSmDdlbKy2uwgv5pSg59o7SC2s9vbW9qlbfdkJtj/mvLafEz7kCsiojcI7rMppetGX+r6WSOvlDWqhUXEYZQlP2e7RYj3auR9389XM8/AISmljwyhyCPj9bM4EbElJWT6V5S7jjKo8SZmVnbbhvWnWP0J+BxwPvCK9pj3pJReMoJij62IuCszo9ufzvqj238APNga+tItdnCOVJ2U0tsoi3n0W9SyqymldcDzKQPgeiYixLV4bQ1xD8qCLl+gTDXbErgPZRW3HSm18LWUjVE+TpnrfbeU0kEppSMpK4vdDLy47U+eSu3e5Tv33Taddci6kRdqQlgjnxKza5zTpK9mPm+Iz3d++mrmhzLFIT7N10+/tk/8jpSR2ptRAvr3lOb2eaehRcSJlAVlnptS+sAoytq19rWzCzPN6nPNL/8mM/PLf7Ah88tlH7mmQErpbRHxLeCbS2226+sz/2BKad6dqzQ1NgfuRlmy9TaU5vUtKLt5/XbA9dWrfd44/CJ2JyLuQQnt3gj2O8465Fxmgtv55SvEINdUSCl9YxmPXceA7Sc12doBWy+lbMLxANbvC+93Xbs152rKwK2L2sfvAxxIqb1XuXLYIBHxN5R58nOto34pMyPUz5j0UftdMcglaR7thh/fAnZof/Qnysj1Kyij0DdjZtOU2zMzkOuoiDibEmQHUsL/mJRStRtzzCUi9qRs7drvKkpX1meAnzt4bfgMckma3yGUEL8WeCZwSkrpprkObEdkPxJ4fHvsQ9oblN24Xjf00o7eecBHgccxsxDMHSjTLh8PnBIRpwLf7a10p5VnkEvS/Hpr529FaVrfMiJ+CPyaMlhrY8oGKn9FmSP9cMoqZ7M9ANiWsjvaxEgpXQM8s10B70GUf/sBlPOwe3t7E3BNRJxOaWI/JaX0i46KPJEctT4lHHU8mOdnsGk9P+3I67cBL2fupVjncwHwPuAUSo11N8qKZntPQ1NzRGxF2amsF+w7zDrk55Rz0+s7v2akBZwwBvmUmNY34sXy/Aw27eennf/9ZErT+T0pc8c3ocx9vhK4jBLe51JqnBf3PfbOlDnmd6IsePL9kRZ+DETEdpSR7AdQ5tVvPeuQtcAzUkonjrhoE8EgnxLT/ka8EM/PYJ6f5YmIjwAHAy9KKb236/J0KSI2AZ5HGRB3275frQPuYO186ewjl6QhaheRuXf77W+7LEtX2haN3oj+fSkD4mZ7DWVQoZbIIJek4XoVZfT6lZTFUKZKRLyfW+5ZcAkzW5s6v3yZDHJJGoJ2DvrbgWe3P3p5Smkaa5znt18/Qwnu03B++YoyyCVphbSj3Hej9Ic/h7KM6xpK3/jHuyxbh94H/HtK6aldF2RSGeSStAzt6mb7UzYIeQhlQ5Wer1Bq4j/uomzjIKV0U0R0XYyJZpBL0vI8jbIWe88llJXcjk0pnT/3Q6SVY5BL0vKczMymKucAP7X/V6NkkEvSMqSUTokIUkondF0WTadbdV0ASZK04QxySZIqZpBLklQxg1ySpIoZ5JIkVcwglySpYgb5hIuIjSJiVXt/VURs1HGRxornZzDPz2ARsUlErG7vr2636FTL62c0DPLJ9wbgsPb+YcDrOyzLOPL8DOb5GexUYK/2/l7AKR2WZRx5/YxAk7MLEE2yiDgT2KPrclTkzJTSnl0XYlx4/WiF+foaAld2m3ynA7sCWwA3AEenlN7UbZHGR9vsdxgz5+f0Tgs0frx+Bmib1ffq+9HqlNI+HRVn7Pj6Gg2DfPIdCWRgFXA0cFSnpRk/vfOzL+VNxvOzPs/PYPtTmtP3BlYDB3RZmDHk9TMCNq1PiYjIKaWm63JIk8jXl7rkYDdJkipmkEuSVDGDXJKkihnkkiRVzCCXJKliBrkkSRUzyCVJqphBLklSxQxySZIqZpBLklQxg1ySpIq51nqlImLo/3GuHa1p5etLNTHIJUmqmE3rkiRVzCCXJKliBrkkSRXbuOsCaOUsd4COg2+k+fn60rhysJskSRWzaV2SpIoZ5JIkVcwglySpYg52m3DzDdBx4I20fL6+NA4c7CZJUsVsWpckqWIGuSRJFTPIJUmqmEEuSVLFDHJJkipmkEuSVDGDXJKkihnkkiRVzCCXJKliBrkkSRUzyCVJqphBLklSxQxySZIqZpBLklQxg1ySpIoZ5JIkVcwglySpYga5JEkVM8glSaqYQS5JUsUMckmSKmaQS5JUMYNckqSKGeSSJFXMIJckqWIGuSRJFTPIJUmqmEEuSVLFDHJJkipmkEuSVDGDXJKkihnkkiRVzCCXJKliBrkkSRUzyCVJqphBLklSxQxySZIqZpBLklQxg1ySpIoZ5JIkVcwglySpYga5JEkVM8glSaqYQS5JUsUMckmSKmaQS5JUMYNckqSKGeSSJFXMIJckqWIGuSRJFTPIJUmqmEEuSVLFDHJJkipmkEuSVDGDXJKkihnkkiRVzCCXJKliBrkkSRX7f3RD7TF7wc51AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 452.698x177.48 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C 1 2 1 fF\n",
      "C 0 1 1 fF\n",
      "J 0 1 L_J\n",
      "C 0 2 1 fF\n",
      "L 0 2 10 nH\n",
      "R 0 2 1 MOhm\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cir = GUI('circuits/transmon_LC_GUI.txt', # location of the circuit file\n",
    "        edit=True, # open the GUI to edit the circuit\n",
    "        plot=True, # plot the circuit after having edited it\n",
    "        print_network=True # print the network\n",
    "       )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T15:16:40.476000Z",
     "start_time": "2019-05-01T15:16:40.470000Z"
    }
   },
   "source": [
    "Notice that the junction does not have a value \n",
    "here but a symbolic label ``L_J``.\n",
    "This is because in this example, \n",
    "we wish to sweep its value.\n",
    "\n",
    "The most computationally expensive part of the \n",
    "analysis is performed upon initializing the circuit. \n",
    "To avoid doing at each iteration of our sweep, \n",
    "we have the option to enter a symbolic value for a component.\n",
    "    \n",
    "Its value can then be passed\n",
    "as a keyword argument in subsequent function calls ``L_J=1e-9``. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Circuit parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-04-26T15:28:39.598268Z",
     "start_time": "2019-04-26T15:28:39.547268Z"
    }
   },
   "source": [
    "We now calculate the eigenfrequency, loss-rates, anharmonicity, and Kerr parameters of the circuit. \n",
    "\n",
    "This can be done through the functions ``eigenfrequencies``, ``loss_rates``, ``anharmonicities`` and ``kerr``, which return the specified quantities for each mode, **ordered with increasing mode frequency**.\n",
    "\n",
    "These quantities are plotted below for a varying Josephson inductance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T17:59:59.585600Z",
     "start_time": "2019-05-01T17:59:58.391600Z"
    }
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "_lambdifygenerated() missing 1 required positional argument: 'L_J'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-3-36fd586f8c99>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'$\\kappa_m$ (MHz)'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL_J\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m1e9\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcir\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0manharmonicities\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL_J\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m1e6\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mL_J\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'$A_m$ (MHz)'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-3-36fd586f8c99>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'$\\kappa_m$ (MHz)'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0max\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL_J\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m1e9\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcir\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0manharmonicities\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL_J\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m1e6\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mL_J\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'$A_m$ (MHz)'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/core.py\u001b[0m in \u001b[0;36manharmonicities\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    308\u001b[0m             \u001b[0mNormal\u001b[0m \u001b[0mmode\u001b[0m \u001b[0manharmonicities\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    309\u001b[0m         '''\n\u001b[0;32m--> 310\u001b[0;31m         \u001b[0mKs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkerr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    311\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mKs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mKs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/core.py\u001b[0m in \u001b[0;36mkerr\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    366\u001b[0m             \u001b[0mKerr\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    367\u001b[0m         '''\n\u001b[0;32m--> 368\u001b[0;31m         \u001b[0mAs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_anharmonicities_per_junction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    369\u001b[0m         \u001b[0mN_modes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mw_cpx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    370\u001b[0m         \u001b[0mN_junctions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjunctions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/core.py\u001b[0m in \u001b[0;36m_anharmonicities_per_junction\u001b[0;34m(self, pretty_print, **kwargs)\u001b[0m\n\u001b[1;32m    176\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_anharmonicities_per_junction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpretty_print\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_w_cpx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 178\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_anharmonicity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mw_cpx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjunctions\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    179\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0meigenfrequencies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/core.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    176\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_anharmonicities_per_junction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpretty_print\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_w_cpx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 178\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_anharmonicity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mw_cpx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mj\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjunctions\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    179\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0meigenfrequencies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/core.py\u001b[0m in \u001b[0;36m_anharmonicity\u001b[0;34m(self, w, **kwargs)\u001b[0m\n\u001b[1;32m   2221\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2222\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_anharmonicity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2223\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_Ej\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_zpf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'flux'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2224\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2225\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0manharmonicity\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/core.py\u001b[0m in \u001b[0;36m_zpf\u001b[0;34m(self, w, quantity, **kwargs)\u001b[0m\n\u001b[1;32m   1921\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1922\u001b[0m         \u001b[0;31m# Note that the flux defined in _flux\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1923\u001b[0;31m         \u001b[0mphi_zpf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_flux\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1924\u001b[0m         \u001b[0;31m# is complex.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1925\u001b[0m         \u001b[0;31m# This causes a problem for the quantization:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/core.py\u001b[0m in \u001b[0;36m_flux\u001b[0;34m(self, w, **kwargs)\u001b[0m\n\u001b[1;32m   1885\u001b[0m         \u001b[0;31m#  = sqrt(hbar/w/ImdY[w])\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1886\u001b[0m         \u001b[0;31m# The minus is there since 1/Im(Y)  = -Im(1/Y)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1887\u001b[0;31m         \u001b[0mphi_zpf_r\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhbar\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_circuit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inverse_of_dY\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1888\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1889\u001b[0m         \u001b[0;31m# Note that the flux defined here\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/_utility.py\u001b[0m in \u001b[0;36mwrapper_vectorize\u001b[0;34m(self, w, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m             \u001b[0;31m# iterable = True\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvectorize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mw_single\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfunc_to_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mw_single\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper_vectorize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/numpy/lib/function_base.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2089\u001b[0m             \u001b[0mvargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0m_n\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_n\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2090\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2091\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_vectorize_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2092\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2093\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_get_ufunc_and_otypes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/numpy/lib/function_base.py\u001b[0m in \u001b[0;36m_vectorize_call\u001b[0;34m(self, func, args)\u001b[0m\n\u001b[1;32m   2159\u001b[0m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2160\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2161\u001b[0;31m             \u001b[0mufunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0motypes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_ufunc_and_otypes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2163\u001b[0m             \u001b[0;31m# Convert args to object arrays first\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/numpy/lib/function_base.py\u001b[0m in \u001b[0;36m_get_ufunc_and_otypes\u001b[0;34m(self, func, args)\u001b[0m\n\u001b[1;32m   2119\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2120\u001b[0m             \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflat\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0marg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2121\u001b[0;31m             \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2123\u001b[0m             \u001b[0;31m# Performance note: profiling indicates that -- for simple\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/_utility.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(w_single)\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m             \u001b[0;31m# iterable = True\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvectorize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mw_single\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mfunc_to_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mw_single\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper_vectorize\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/_utility.py\u001b[0m in \u001b[0;36mwrapper_safely_evaluate\u001b[0;34m(self, w, **kwargs)\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwrapper_safely_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc_to_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     40\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mFloatingPointError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m             \u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34mf\"\\n\\tPerturbing f = {w/2./np.pi} to find finite value\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/anaconda3/lib/python3.7/site-packages/qucat/src/core.py\u001b[0m in \u001b[0;36m_inverse_of_dY\u001b[0;34m(self, w, **kwargs)\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0msafely_evaluate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    136\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_inverse_of_dY\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inverse_of_dY_lambdified\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_check_kwargs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: _lambdifygenerated() missing 1 required positional argument: 'L_J'"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x288 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create a 2x2 grid of plots\n",
    "fig,ax = plt.subplots(2,2,sharex = True,figsize = (8,4))\n",
    "\n",
    "# Here we specify the values the junction inductance should take\n",
    "L_J = np.linspace(11e-9,9e-9, 1001)\n",
    "\n",
    "ax[0][0].plot(L_J*1e9,[cir.eigenfrequencies(L_J = x)/1e9 for x in L_J])\n",
    "ax[0][0].set_ylabel('$\\omega_m$ (GHz)')\n",
    "\n",
    "\n",
    "ax[0][1].plot(L_J*1e9,[cir.loss_rates(L_J = x)/1e6 for x in L_J])\n",
    "ax[0][1].set_ylabel('$\\kappa_m$ (MHz)')\n",
    "\n",
    "ax[1][0].plot(L_J*1e9,[cir.anharmonicities(L_J = x)/1e6 for x in L_J])\n",
    "ax[1][0].set_ylabel('$A_m$ (MHz)')\n",
    "\n",
    "# the components ``K[i,j]`` of the matrix returned by the kerr function\n",
    "# corresponds to the cross-Kerr interaction of mode ``i`` with mode ``j``\n",
    "ax[1][1].plot(L_J*1e9,[cir.kerr(L_J = x)[0,1]/1e6 for x in L_J])\n",
    "ax[1][1].set_ylabel('$\\chi_{01}$ (MHz)')\n",
    "\n",
    "ax[1][0].set_xlabel('$L_J$ (nH)')\n",
    "ax[1][1].set_xlabel('$L_J$ (nH)')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Alternatively, we can obtain all these parameters at once for a given value of the junction inductance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:02:44.460600Z",
     "start_time": "2019-05-01T18:02:44.451600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([4.98333767e+09, 5.03291805e+09]),\n",
       " array([390085.6448015 , 397887.35776132]),\n",
       " array([47500085.74918161, 48449966.18128259]),\n",
       " array([[47500085.74918161, 95945350.03127295],\n",
       "        [95945350.03127295, 48449966.18128259]]))"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cir.f_k_A_chi(L_J=1e-8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "and print them in a pretty way"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:03:19.320600Z",
     "start_time": "2019-05-01T18:03:19.314600Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    mode |  freq.  |  diss.  |  anha.  |\n",
      "       0 | 5.0 GHz | 390 kHz |  48 MHz |\n",
      "       1 | 5.0 GHz | 398 kHz |  48 MHz |\n",
      "\n",
      "Kerr coefficients\n",
      "(diagonal = Kerr, off-diagonal = cross-Kerr)\n",
      "    mode |    0    |    1    |\n",
      "       0 |  48 MHz |         |\n",
      "       1 |  96 MHz |  48 MHz |\n",
      "\n"
     ]
    }
   ],
   "source": [
    "f,k,A,chi = cir.f_k_A_chi(L_J=1e-8,pretty_print = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizing normal modes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now concentrate on the resonance point, when the normal mode splitting occurs ``L_J = 10e-9``\n",
    "\n",
    "We use the ``show_normal_mode`` method to visualize the two different modes.\n",
    "\n",
    "The size and annotation of the arrows corresponds to the contribution of the mode to the zero-point fluctuations in current $i_\\text{zpf,m}$, such that the operator for the total current entering a component is\n",
    "\n",
    "$\\hat{i} = \\sum_m i_\\text{zpf,m}(\\hat{a}_m+\\hat{a}_m^\\dagger)$\n",
    "\n",
    "where $\\hat{a}_m$ is the annihilation operator of mode $m$.\n",
    "\n",
    "The relative direction of the arrows is given by the direction current would flow through that component if mode $m$ was in a coherent state.\n",
    "\n",
    "By changing the parameter ``quantity``, we show the value of other zero-point fluctuations, and we can enter ``'voltage'``, ``'charge'``, or ``'flux'``. The direction of the arrows however, always represent the current."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:00:00.168600Z",
     "start_time": "2019-05-01T17:59:59.589600Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 563.698x219.6 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 563.698x219.6 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir.show_normal_mode(mode=0,quantity='current', L_J = 10e-9)\n",
    "cir.show_normal_mode(mode=1,quantity='current', L_J = 10e-9)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see above that the symmetry on each side of the coupling capacitor is changing between the modes, the above is called the anti-symmetric mode, with a voltage build-up on either side of the coupling capacitor leading to a current going through it. Mode 1 is the anti-symmetric mode.\n",
    "\n",
    "These zero-point fluctuations can also be accessed programmatically in the case we build the circuit with the Network function, see below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:00:00.267600Z",
     "start_time": "2019-05-01T18:00:00.171600Z"
    }
   },
   "outputs": [],
   "source": [
    "# Import the circuit builder\n",
    "from qucat import Network\n",
    "# Import the circuit components\n",
    "from qucat import L,J,C,R\n",
    "\n",
    "# create the coupling capacitor seperately, \n",
    "# enabling us to interact with it afterwards\n",
    "coupling_capacitor = C(1,2,1e-15)\n",
    "\n",
    "# construct the circuit\n",
    "cir_net = Network([\n",
    "    C(0,1,100e-15),\n",
    "    J(0,1,10e-9),\n",
    "    coupling_capacitor,\n",
    "    C(2,0,100e-15),\n",
    "    L(2,0,10e-9),\n",
    "    R(2,0,1e6)\n",
    "])"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "The lower frequency (anti-symmetric)  mode has a frequency:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:00:00.275600Z",
     "start_time": "2019-05-01T18:00:00.268600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.983337670035195"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cir_net.eigenfrequencies()[0]/1e9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Which is lower due a higher zero-point voltage fluctuation across the coupling capacitor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:00:00.291600Z",
     "start_time": "2019-05-01T18:00:00.278600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-5.687865667318499e-06j"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coupling_capacitor.zpf(mode = 0, quantity = 'voltage')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compared to the symmetric mode with frequency:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:00:00.300600Z",
     "start_time": "2019-05-01T18:00:00.293600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0329180489473675"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cir_net.eigenfrequencies()[1]/1e9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And zero-point voltage fluctuation across the coupling capacitor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:00:00.313600Z",
     "start_time": "2019-05-01T18:00:00.302600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-2.5231302064585313e-09j"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coupling_capacitor.zpf(mode = 1, quantity = 'voltage')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further analysis in QuTiP"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Hamiltonian of the circuit, with the non-linearity of the Josephson junctions\n",
    "Taylor-expanded, is given by\n",
    "\n",
    "$\\hat{H} = \\sum_{m\\in\\text{modes}} hf_m\\hat{a}_m^\\dagger\\hat{a}_m +\\sum_j\\sum_{2n\\le\\text{taylor}}E_j\\frac{(-1)^{n+1}}{(2n)!}\\left(\\frac{\\phi_{zpf,m,j}}{\\phi_0}(\\hat{a}_m^\\dagger+\\hat{a}_m)\\right)^{2n}$\n",
    "\n",
    "And in its construction, we have the freedom to choose the set of ``modes`` to include, the order of the Taylor expansion of the junction potential, and the number of excitations of each mode to consider.\n",
    "\n",
    "We will use the diagonalization of the hamiltonian to produce the evolution of two first transition frequencies of the system as a function of ``L_J``"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:19:59.200600Z",
     "start_time": "2019-05-01T18:19:57.997600Z"
    }
   },
   "outputs": [],
   "source": [
    "eigen_energies = []\n",
    "L_J = np.linspace(10e-9,8e-9, 101)\n",
    "for x in L_J:\n",
    "    # Note that we could use either ``cir`` or the circuit built above ``cir_net``\n",
    "    H = cir.hamiltonian(modes = [0,1],taylor = 8,excitations = [10,10], L_J = x)\n",
    "    eigen_energies.append(H.eigenenergies())\n",
    "eigen_energies = np.absolute(eigen_energies)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can for example compare the size of the avoided crossing computed from a diagonalization of the Hamiltonian (usually called the vacuum-Rabi splitting), with that calculated from a normal mode analysis (called normal-mode splitting)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:19:59.378600Z",
     "start_time": "2019-05-01T18:19:59.201600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "first_transition = (eigen_energies[:,1]-eigen_energies[:,0])\n",
    "second_transition = (eigen_energies[:,2]-eigen_energies[:,0])\n",
    "\n",
    "plt.plot(L_J*1e9,first_transition/1e9)\n",
    "plt.plot(L_J*1e9,second_transition/1e9)\n",
    "plt.xlabel('L_J (nH)')\n",
    "plt.ylabel('First two transitions of the circuit (GHz)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the splitting does not occur at 10nH anymore. This is because the Transmon \"bare\" frequency is shifted by the quantum fluctuations through the junctions.\n",
    "\n",
    "However, the magnitude of the frequency spliting that occurs is approximately the same and can be predicted without recourse to a Hamiltonian diagonalization. This splitting is also twice the coupling $g$ that one would use when formulating this problem in the context of the Rabi or Jaynes-Cummings Hamiltonian."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-01T18:21:15.885600Z",
     "start_time": "2019-05-01T18:21:15.863600Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Quantum calculation -- Rabi splitting is 49.66 MHz\n",
      "Classical calculation -- normal-mode splitting is 49.58 MHz\n"
     ]
    }
   ],
   "source": [
    "rabi_splitting = min(second_transition-first_transition)/1e6\n",
    "mode_splitting = (cir.eigenfrequencies(L_J=10e-9)[1]-cir.eigenfrequencies(L_J=10e-9)[0])/1e6\n",
    "\n",
    "print(\"Quantum calculation -- Rabi splitting is %.2f MHz\"%rabi_splitting)\n",
    "print(\"Classical calculation -- normal-mode splitting is %.2f MHz\"%mode_splitting)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
